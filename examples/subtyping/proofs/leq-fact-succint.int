;; The proof (at each commit) will be displayed in this buffer

(start-term ((*fact-factory* (FUN n *int* (*succ* *int*))) *int*))
(start-goal (*succ* *int*))

(rewrite macro-expand :on-objectives nil :path (0 0) :desc "Macro expand to replace *fact-factory* by (FUN obj top (y (FUN self 'obj (FUN n *int* (('n *1*) (FUN a *int* ((*mult* 'n) ('self 'a))))))))")
(rewrite beta-substitute-all :on-objectives nil :path nil :desc "Beta substitute all to replace (((FUN obj top (y (FUN self 'obj (FUN n *int* (('n *1*) (FUN a *int* ((*mult* 'n) ('self 'a)))))))) (FUN n *int* (*succ* *int*))) *int*) by ((y (FUN self (FUN n *int* (*succ* *int*)) (FUN n *int* (('n *1*) (FUN a *int* ((*mult* 'n) ('self 'a))))))) *int*)")
(rewrite macro-expand :on-objectives nil :path (1) :desc "Macro expand to replace *int* by (y (FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case 'self))))))")
(rewrite beta-substitute :on-objectives nil :path (1) :desc "Beta substitute to replace (y (FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case 'self)))))) by ((FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case 'self))))) (y (FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case 'self)))))))")
(rewrite beta-substitute-all :on-objectives nil :path nil :desc "Beta substitute all to replace ((y (FUN self (FUN n *int* (*succ* *int*)) (FUN n *int* (('n *1*) (FUN a *int* ((*mult* 'n) ('self 'a))))))) ((FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case 'self))))) (y (FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case 'self)))))))) by ((y (FUN self (FUN n *int* (*succ* *int*)) (FUN n *int* (('n *1*) (FUN a *int* ((*mult* 'n) ('self 'a))))))) (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case (y (FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case 'self)))))))))))")
(rewrite split-or-all :on-objectives nil :path (1 3 3) :desc "Split OR to replace (OR 'zero-case ('succ-case (y (FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case 'self)))))))) by 'zero-case")
(rewrite beta-substitute :on-objectives nil :path (0) :desc "Beta substitute to replace (y (FUN self (FUN n *int* (*succ* *int*)) (FUN n *int* (('n *1*) (FUN a *int* ((*mult* 'n) ('self 'a))))))) by ((FUN self (FUN n *int* (*succ* *int*)) (FUN n *int* (('n *1*) (FUN a *int* ((*mult* 'n) ('self 'a)))))) (y (FUN self (FUN n *int* (*succ* *int*)) (FUN n *int* (('n *1*) (FUN a *int* ((*mult* 'n) ('self 'a))))))))")
(rewrite beta-substitute-all :on-objectives nil :path nil :desc "Beta substitute all to replace (((FUN self (FUN n *int* (*succ* *int*)) (FUN n *int* (('n *1*) (FUN a *int* ((*mult* 'n) ('self 'a)))))) (y (FUN self (FUN n *int* (*succ* *int*)) (FUN n *int* (('n *1*) (FUN a *int* ((*mult* 'n) ('self 'a)))))))) (FUN zero-case top (FUN succ-case (FUN n top top) 'zero-case))) by *1*")
(rewrite macro-expand :on-objectives t :path (1) :desc "Macro expand to replace *int* by (y (FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case 'self))))))")
(rewrite (objective-or-split 0) :on-objectives t :path (1 1 3 3 3) :desc "Objective OR split (0) to replace (OR 'zero-case ('succ-case 'self)) by 'zero-case")
(rewrite macro-expand :on-objectives t :path (0) :desc "Macro expand to replace *succ* by (FUN n *int* (FUN zero-case top (FUN succ-case (FUN n top top) ('succ-case 'n))))")
(rewrite beta-substitute :on-objectives t :path (1) :desc "Beta substitute to replace (y (FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) 'zero-case)))) by ((FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) 'zero-case))) (y (FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) 'zero-case)))))")
(rewrite beta-substitute-all :on-objectives t :path nil :desc "Beta substitute all to replace ((FUN n *int* (FUN zero-case top (FUN succ-case (FUN n top top) ('succ-case 'n)))) ((FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) 'zero-case))) (y (FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) 'zero-case)))))) by (FUN zero-case top (FUN succ-case (FUN n top top) ('succ-case (FUN zero-case top (FUN succ-case (FUN n top top) 'zero-case)))))")
(rewrite macro-expand :on-objectives nil :path nil :desc "Macro expand to replace *1* by (FUN zero-case top (FUN succ-case (FUN n top top) ('succ-case (FUN zero-case top (FUN succ-case (FUN n top top) 'zero-case)))))")
(qed)
(commit)


(rewrite promote :on-objectives nil :path (0 1 3 3 1 3 1 0) :desc "Promote to replace 'self by (FUN n *int* (*succ* *int*))")
(rewrite beta-substitute-all :on-objectives nil :path nil :desc "Beta substitute all to replace ((y (FUN self (FUN n *int* (*succ* *int*)) (FUN n *int* (('n *1*) (FUN a *int* ((*mult* 'n) ((FUN n *int* (*succ* *int*)) 'a))))))) (FUN zero-case top (FUN succ-case (FUN n top top) ('succ-case (y (FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case 'self)))))))))) by ((y (FUN self (FUN n *int* (*succ* *int*)) (FUN n *int* (('n *1*) (FUN a *int* ((*mult* 'n) (*succ* *int*))))))) (FUN zero-case top (FUN succ-case (FUN n top top) ('succ-case (y (FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case 'self))))))))))")
(rewrite beta-substitute :on-objectives nil :path (0) :desc "Beta substitute to replace (y (FUN self (FUN n *int* (*succ* *int*)) (FUN n *int* (('n *1*) (FUN a *int* ((*mult* 'n) (*succ* *int*))))))) by ((FUN self (FUN n *int* (*succ* *int*)) (FUN n *int* (('n *1*) (FUN a *int* ((*mult* 'n) (*succ* *int*)))))) (y (FUN self (FUN n *int* (*succ* *int*)) (FUN n *int* (('n *1*) (FUN a *int* ((*mult* 'n) (*succ* *int*))))))))")
(rewrite beta-substitute-all :on-objectives nil :path nil :desc "Beta substitute all to replace (((FUN self (FUN n *int* (*succ* *int*)) (FUN n *int* (('n *1*) (FUN a *int* ((*mult* 'n) (*succ* *int*)))))) (y (FUN self (FUN n *int* (*succ* *int*)) (FUN n *int* (('n *1*) (FUN a *int* ((*mult* 'n) (*succ* *int*)))))))) (FUN zero-case top (FUN succ-case (FUN n top top) ('succ-case (y (FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case 'self)))))))))) by ((*mult* (FUN zero-case top (FUN succ-case (FUN n top top) ('succ-case (y (FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case 'self)))))))))) (*succ* *int*))")
(rewrite macro-expand :on-objectives nil :path (0 0) :desc "Macro expand to replace *mult* by (y (FUN self (FUN a *int* (FUN b *int* *int*)) (FUN m *int* (FUN n *int* (('m *0*) (FUN a *int* ((*plus* 'n) (('self 'a) 'n))))))))")
(rewrite beta-substitute :on-objectives nil :path (0 0) :desc "Beta substitute to replace (y (FUN self (FUN a *int* (FUN b *int* *int*)) (FUN m *int* (FUN n *int* (('m *0*) (FUN a *int* ((*plus* 'n) (('self 'a) 'n)))))))) by ((FUN self (FUN a *int* (FUN b *int* *int*)) (FUN m *int* (FUN n *int* (('m *0*) (FUN a *int* ((*plus* 'n) (('self 'a) 'n))))))) (y (FUN self (FUN a *int* (FUN b *int* *int*)) (FUN m *int* (FUN n *int* (('m *0*) (FUN a *int* ((*plus* 'n) (('self 'a) 'n)))))))))")
(rewrite beta-substitute-all :on-objectives nil :path nil :desc "Beta substitute all to replace ((((FUN self (FUN a *int* (FUN b *int* *int*)) (FUN m *int* (FUN n *int* (('m *0*) (FUN a *int* ((*plus* 'n) (('self 'a) 'n))))))) (y (FUN self (FUN a *int* (FUN b *int* *int*)) (FUN m *int* (FUN n *int* (('m *0*) (FUN a *int* ((*plus* 'n) (('self 'a) 'n))))))))) (FUN zero-case top (FUN succ-case (FUN n top top) ('succ-case (y (FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case 'self)))))))))) (*succ* *int*)) by ((*plus* (*succ* *int*)) (((y (FUN self (FUN a *int* (FUN b *int* *int*)) (FUN m *int* (FUN n *int* (('m *0*) (FUN a *int* ((*plus* 'n) (('self 'a) 'n)))))))) (y (FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case 'self))))))) (*succ* *int*)))")
(rewrite promote :on-objectives nil :path (1 0 0 1 3 3 3 1 3 1 0 0) :desc "Promote to replace 'self by (FUN a *int* (FUN b *int* *int*))")
(rewrite beta-substitute-all :on-objectives nil :path nil :desc "Beta substitute all to replace ((*plus* (*succ* *int*)) (((y (FUN self (FUN a *int* (FUN b *int* *int*)) (FUN m *int* (FUN n *int* (('m *0*) (FUN a *int* ((*plus* 'n) (((FUN a *int* (FUN b *int* *int*)) 'a) 'n)))))))) (y (FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case 'self))))))) (*succ* *int*))) by ((*plus* (*succ* *int*)) (((y (FUN self (FUN a *int* (FUN b *int* *int*)) (FUN m *int* (FUN n *int* (('m *0*) (FUN a *int* ((*plus* 'n) *int*))))))) (y (FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case 'self))))))) (*succ* *int*)))")
(rewrite beta-substitute :on-objectives nil :path (1 0 0) :desc "Beta substitute to replace (y (FUN self (FUN a *int* (FUN b *int* *int*)) (FUN m *int* (FUN n *int* (('m *0*) (FUN a *int* ((*plus* 'n) *int*))))))) by ((FUN self (FUN a *int* (FUN b *int* *int*)) (FUN m *int* (FUN n *int* (('m *0*) (FUN a *int* ((*plus* 'n) *int*)))))) (y (FUN self (FUN a *int* (FUN b *int* *int*)) (FUN m *int* (FUN n *int* (('m *0*) (FUN a *int* ((*plus* 'n) *int*))))))))")
(rewrite beta-substitute-all :on-objectives nil :path nil :desc "Beta substitute all to replace ((*plus* (*succ* *int*)) ((((FUN self (FUN a *int* (FUN b *int* *int*)) (FUN m *int* (FUN n *int* (('m *0*) (FUN a *int* ((*plus* 'n) *int*)))))) (y (FUN self (FUN a *int* (FUN b *int* *int*)) (FUN m *int* (FUN n *int* (('m *0*) (FUN a *int* ((*plus* 'n) *int*)))))))) (y (FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case 'self))))))) (*succ* *int*))) by ((*plus* (*succ* *int*)) (((y (FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case 'self)))))) *0*) (FUN a *int* ((*plus* (*succ* *int*)) *int*))))")
(rewrite beta-substitute :on-objectives nil :path (1 0 0) :desc "Beta substitute to replace (y (FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case 'self)))))) by ((FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case 'self))))) (y (FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case 'self)))))))")
(rewrite beta-substitute-all :on-objectives nil :path nil :desc "Beta substitute all to replace ((*plus* (*succ* *int*)) ((((FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case 'self))))) (y (FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case 'self))))))) *0*) (FUN a *int* ((*plus* (*succ* *int*)) *int*)))) by ((*plus* (*succ* *int*)) (OR *0* ((*plus* (*succ* *int*)) *int*)))")
(rewrite split-or-all :on-objectives nil :path (1) :desc "Split OR to replace (OR *0* ((*plus* (*succ* *int*)) *int*)) by *0*")
(rewrite macro-expand :on-objectives nil :path (0 0) :desc "Macro expand to replace *plus* by (y (FUN self (FUN a *int* (FUN b *int* *int*)) (FUN m *int* (FUN n *int* (('m 'n) (FUN a *int* (*succ* (('self 'a) 'n))))))))")
(rewrite macro-expand :on-objectives nil :path (1) :desc "Macro expand to replace *0* by (FUN zero-case top (FUN succ-case (FUN n top top) 'zero-case))")
(rewrite beta-substitute :on-objectives nil :path (0 0) :desc "Beta substitute to replace (y (FUN self (FUN a *int* (FUN b *int* *int*)) (FUN m *int* (FUN n *int* (('m 'n) (FUN a *int* (*succ* (('self 'a) 'n)))))))) by ((FUN self (FUN a *int* (FUN b *int* *int*)) (FUN m *int* (FUN n *int* (('m 'n) (FUN a *int* (*succ* (('self 'a) 'n))))))) (y (FUN self (FUN a *int* (FUN b *int* *int*)) (FUN m *int* (FUN n *int* (('m 'n) (FUN a *int* (*succ* (('self 'a) 'n)))))))))")
(rewrite beta-substitute-all :on-objectives nil :path nil :desc "Beta substitute all to replace ((((FUN self (FUN a *int* (FUN b *int* *int*)) (FUN m *int* (FUN n *int* (('m 'n) (FUN a *int* (*succ* (('self 'a) 'n))))))) (y (FUN self (FUN a *int* (FUN b *int* *int*)) (FUN m *int* (FUN n *int* (('m 'n) (FUN a *int* (*succ* (('self 'a) 'n))))))))) (*succ* *int*)) (FUN zero-case top (FUN succ-case (FUN n top top) 'zero-case))) by (((*succ* *int*) (FUN zero-case top (FUN succ-case (FUN n top top) 'zero-case))) (FUN a *int* (*succ* (((y (FUN self (FUN a *int* (FUN b *int* *int*)) (FUN m *int* (FUN n *int* (('m 'n) (FUN a *int* (*succ* (('self 'a) 'n)))))))) 'a) (FUN zero-case top (FUN succ-case (FUN n top top) 'zero-case))))))")
(rewrite macro-expand :on-objectives nil :path (0 0 0) :desc "Macro expand to replace *succ* by (FUN n *int* (FUN zero-case top (FUN succ-case (FUN n top top) ('succ-case 'n))))")
(rewrite beta-substitute-all :on-objectives nil :path nil :desc "Beta substitute all to replace ((((FUN n *int* (FUN zero-case top (FUN succ-case (FUN n top top) ('succ-case 'n)))) *int*) (FUN zero-case top (FUN succ-case (FUN n top top) 'zero-case))) (FUN a *int* (*succ* (((y (FUN self (FUN a *int* (FUN b *int* *int*)) (FUN m *int* (FUN n *int* (('m 'n) (FUN a *int* (*succ* (('self 'a) 'n)))))))) 'a) (FUN zero-case top (FUN succ-case (FUN n top top) 'zero-case)))))) by (*succ* (((y (FUN self (FUN a *int* (FUN b *int* *int*)) (FUN m *int* (FUN n *int* (('m 'n) (FUN a *int* (*succ* (('self 'a) 'n)))))))) *int*) (FUN zero-case top (FUN succ-case (FUN n top top) 'zero-case))))")
(rewrite promote :on-objectives nil :path (1 0 0 1 3 3 3 1 3 1 0 0) :desc "Promote to replace 'self by (FUN a *int* (FUN b *int* *int*))")
(rewrite beta-substitute-all :on-objectives nil :path nil :desc "Beta substitute all to replace (*succ* (((y (FUN self (FUN a *int* (FUN b *int* *int*)) (FUN m *int* (FUN n *int* (('m 'n) (FUN a *int* (*succ* (((FUN a *int* (FUN b *int* *int*)) 'a) 'n)))))))) *int*) (FUN zero-case top (FUN succ-case (FUN n top top) 'zero-case)))) by (*succ* (((y (FUN self (FUN a *int* (FUN b *int* *int*)) (FUN m *int* (FUN n *int* (('m 'n) (FUN a *int* (*succ* *int*))))))) *int*) (FUN zero-case top (FUN succ-case (FUN n top top) 'zero-case))))")
(rewrite beta-substitute :on-objectives nil :path (1 0 0) :desc "Beta substitute to replace (y (FUN self (FUN a *int* (FUN b *int* *int*)) (FUN m *int* (FUN n *int* (('m 'n) (FUN a *int* (*succ* *int*))))))) by ((FUN self (FUN a *int* (FUN b *int* *int*)) (FUN m *int* (FUN n *int* (('m 'n) (FUN a *int* (*succ* *int*)))))) (y (FUN self (FUN a *int* (FUN b *int* *int*)) (FUN m *int* (FUN n *int* (('m 'n) (FUN a *int* (*succ* *int*))))))))")
(rewrite beta-substitute-all :on-objectives nil :path nil :desc "Beta substitute all to replace (*succ* ((((FUN self (FUN a *int* (FUN b *int* *int*)) (FUN m *int* (FUN n *int* (('m 'n) (FUN a *int* (*succ* *int*)))))) (y (FUN self (FUN a *int* (FUN b *int* *int*)) (FUN m *int* (FUN n *int* (('m 'n) (FUN a *int* (*succ* *int*)))))))) *int*) (FUN zero-case top (FUN succ-case (FUN n top top) 'zero-case)))) by (*succ* ((*int* (FUN zero-case top (FUN succ-case (FUN n top top) 'zero-case))) (FUN a *int* (*succ* *int*))))")
(rewrite macro-expand :on-objectives nil :path (1 0 0) :desc "Macro expand to replace *int* by (y (FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case 'self))))))")
(rewrite beta-substitute :on-objectives nil :path (1 0 0) :desc "Beta substitute to replace (y (FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case 'self)))))) by ((FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case 'self))))) (y (FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case 'self)))))))")
(rewrite beta-substitute-all :on-objectives nil :path nil :desc "Beta substitute all to replace (*succ* ((((FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case 'self))))) (y (FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case 'self))))))) (FUN zero-case top (FUN succ-case (FUN n top top) 'zero-case))) (FUN a *int* (*succ* *int*)))) by (*succ* (OR (FUN zero-case top (FUN succ-case (FUN n top top) 'zero-case)) (*succ* *int*)))")
(rewrite split-or-all :on-objectives nil :path (1) :desc "Split OR to replace (OR (FUN zero-case top (FUN succ-case (FUN n top top) 'zero-case)) (*succ* *int*)) by (FUN zero-case top (FUN succ-case (FUN n top top) 'zero-case))")
(rewrite macro-expand :on-objectives nil :path (0) :desc "Macro expand to replace *succ* by (FUN n *int* (FUN zero-case top (FUN succ-case (FUN n top top) ('succ-case 'n))))")
(rewrite beta-substitute-all :on-objectives nil :path nil :desc "Beta substitute all to replace ((FUN n *int* (FUN zero-case top (FUN succ-case (FUN n top top) ('succ-case 'n)))) (FUN zero-case top (FUN succ-case (FUN n top top) 'zero-case))) by (FUN zero-case top (FUN succ-case (FUN n top top) ('succ-case (FUN zero-case top (FUN succ-case (FUN n top top) 'zero-case)))))")
(rewrite macro-collapse :on-objectives nil :path nil :desc "Macro collapse to replace (FUN zero-case top (FUN succ-case (FUN n top top) ('succ-case (FUN zero-case top (FUN succ-case (FUN n top top) 'zero-case))))) by *1*")
(rewrite macro-expand :on-objectives t :path (1) :desc "Macro expand to replace *int* by (y (FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case 'self))))))")
(rewrite (objective-or-split 0) :on-objectives t :path (1 1 3 3 3) :desc "Objective OR split (0) to replace (OR 'zero-case ('succ-case 'self)) by 'zero-case")
(rewrite beta-substitute :on-objectives t :path (1) :desc "Beta substitute to replace (y (FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) 'zero-case)))) by ((FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) 'zero-case))) (y (FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) 'zero-case)))))")
(rewrite beta-substitute-all :on-objectives t :path nil :desc "Beta substitute all to replace (*succ* ((FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) 'zero-case))) (y (FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) 'zero-case)))))) by (*succ* (FUN zero-case top (FUN succ-case (FUN n top top) 'zero-case)))")
(rewrite macro-expand :on-objectives t :path (0) :desc "Macro expand to replace *succ* by (FUN n *int* (FUN zero-case top (FUN succ-case (FUN n top top) ('succ-case 'n))))")
(rewrite beta-substitute-all :on-objectives t :path nil :desc "Beta substitute all to replace ((FUN n *int* (FUN zero-case top (FUN succ-case (FUN n top top) ('succ-case 'n)))) (FUN zero-case top (FUN succ-case (FUN n top top) 'zero-case))) by (FUN zero-case top (FUN succ-case (FUN n top top) ('succ-case (FUN zero-case top (FUN succ-case (FUN n top top) 'zero-case)))))")
(rewrite macro-expand :on-objectives nil :path nil :desc "Macro expand to replace *1* by (FUN zero-case top (FUN succ-case (FUN n top top) ('succ-case (FUN zero-case top (FUN succ-case (FUN n top top) 'zero-case)))))")
(qed)
(commit)

(rewrite macro-expand :on-objectives t :path (1) :desc "Macro expand to replace *int* by (y (FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case 'self))))))")
(rewrite beta-substitute :on-objectives t :path (1) :desc "Beta substitute to replace (y (FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case 'self)))))) by ((FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case 'self))))) (y (FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case 'self)))))))")
(rewrite beta-substitute-all :on-objectives t :path nil :desc "Beta substitute all to replace (*succ* ((FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case 'self))))) (y (FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case 'self)))))))) by (*succ* (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case (y (FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case 'self)))))))))))")
(rewrite (objective-or-split 1) :on-objectives t :path (1 3 3) :desc "Objective OR split (1) to replace (OR 'zero-case ('succ-case (y (FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case 'self)))))))) by ('succ-case (y (FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case 'self)))))))")
(rewrite macro-expand :on-objectives nil :path (1 0) :desc "Macro expand to replace *succ* by (FUN n *int* (FUN zero-case top (FUN succ-case (FUN n top top) ('succ-case 'n))))")
(rewrite macro-collapse :on-objectives t :path (1 3 3 1) :desc "Macro collapse to replace (y (FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case 'self)))))) by *int*")
(rewrite beta-substitute-all :on-objectives nil :path nil :desc "Beta substitute all to replace (*succ* ((FUN n *int* (FUN zero-case top (FUN succ-case (FUN n top top) ('succ-case 'n)))) *int*)) by (*succ* (FUN zero-case top (FUN succ-case (FUN n top top) ('succ-case *int*))))")
(qed)
(commit)

(rewrite macro-expand :on-objectives nil :path (0 0) :desc "Macro expand to replace *plus* by (y (FUN self (FUN a *int* (FUN b *int* *int*)) (FUN m *int* (FUN n *int* (('m 'n) (FUN a *int* (*succ* (('self 'a) 'n))))))))")
(rewrite macro-expand :on-objectives nil :path (0 1 0) :desc "Macro expand to replace *succ* by (FUN n *int* (FUN zero-case top (FUN succ-case (FUN n top top) ('succ-case 'n))))")
(rewrite beta-substitute-all :on-objectives nil :path nil :desc "Beta substitute all to replace (((y (FUN self (FUN a *int* (FUN b *int* *int*)) (FUN m *int* (FUN n *int* (('m 'n) (FUN a *int* (*succ* (('self 'a) 'n)))))))) ((FUN n *int* (FUN zero-case top (FUN succ-case (FUN n top top) ('succ-case 'n)))) *int*)) ((*plus* (*succ* *int*)) *int*)) by (((y (FUN self (FUN a *int* (FUN b *int* *int*)) (FUN m *int* (FUN n *int* (('m 'n) (FUN a *int* (*succ* (('self 'a) 'n)))))))) (FUN zero-case top (FUN succ-case (FUN n top top) ('succ-case *int*)))) ((*plus* (*succ* *int*)) *int*))")
(rewrite beta-substitute :on-objectives nil :path (0 0) :desc "Beta substitute to replace (y (FUN self (FUN a *int* (FUN b *int* *int*)) (FUN m *int* (FUN n *int* (('m 'n) (FUN a *int* (*succ* (('self 'a) 'n)))))))) by ((FUN self (FUN a *int* (FUN b *int* *int*)) (FUN m *int* (FUN n *int* (('m 'n) (FUN a *int* (*succ* (('self 'a) 'n))))))) (y (FUN self (FUN a *int* (FUN b *int* *int*)) (FUN m *int* (FUN n *int* (('m 'n) (FUN a *int* (*succ* (('self 'a) 'n)))))))))")
(rewrite beta-substitute-all :on-objectives nil :path nil :desc "Beta substitute all to replace ((((FUN self (FUN a *int* (FUN b *int* *int*)) (FUN m *int* (FUN n *int* (('m 'n) (FUN a *int* (*succ* (('self 'a) 'n))))))) (y (FUN self (FUN a *int* (FUN b *int* *int*)) (FUN m *int* (FUN n *int* (('m 'n) (FUN a *int* (*succ* (('self 'a) 'n))))))))) (FUN zero-case top (FUN succ-case (FUN n top top) ('succ-case *int*)))) ((*plus* (*succ* *int*)) *int*)) by (*succ* (((y (FUN self (FUN a *int* (FUN b *int* *int*)) (FUN m *int* (FUN n *int* (('m 'n) (FUN a *int* (*succ* (('self 'a) 'n)))))))) *int*) ((*plus* (*succ* *int*)) *int*)))")
(rewrite promote :on-objectives nil :path (1 0 0 1 3 3 3 1 3 1 0 0) :desc "Promote to replace 'self by (FUN a *int* (FUN b *int* *int*))")
(rewrite beta-substitute-all :on-objectives nil :path nil :desc "Beta substitute all to replace (*succ* (((y (FUN self (FUN a *int* (FUN b *int* *int*)) (FUN m *int* (FUN n *int* (('m 'n) (FUN a *int* (*succ* (((FUN a *int* (FUN b *int* *int*)) 'a) 'n)))))))) *int*) ((*plus* (*succ* *int*)) *int*))) by (*succ* (((y (FUN self (FUN a *int* (FUN b *int* *int*)) (FUN m *int* (FUN n *int* (('m 'n) (FUN a *int* (*succ* *int*))))))) *int*) ((*plus* (*succ* *int*)) *int*)))")
(rewrite beta-substitute :on-objectives nil :path (1 0 0) :desc "Beta substitute to replace (y (FUN self (FUN a *int* (FUN b *int* *int*)) (FUN m *int* (FUN n *int* (('m 'n) (FUN a *int* (*succ* *int*))))))) by ((FUN self (FUN a *int* (FUN b *int* *int*)) (FUN m *int* (FUN n *int* (('m 'n) (FUN a *int* (*succ* *int*)))))) (y (FUN self (FUN a *int* (FUN b *int* *int*)) (FUN m *int* (FUN n *int* (('m 'n) (FUN a *int* (*succ* *int*))))))))")
(rewrite beta-substitute-all :on-objectives nil :path nil :desc "Beta substitute all to replace (*succ* ((((FUN self (FUN a *int* (FUN b *int* *int*)) (FUN m *int* (FUN n *int* (('m 'n) (FUN a *int* (*succ* *int*)))))) (y (FUN self (FUN a *int* (FUN b *int* *int*)) (FUN m *int* (FUN n *int* (('m 'n) (FUN a *int* (*succ* *int*)))))))) *int*) ((*plus* (*succ* *int*)) *int*))) by (*succ* ((*int* ((*plus* (*succ* *int*)) *int*)) (FUN a *int* (*succ* *int*))))")
(rewrite macro-expand :on-objectives nil :path (1 0 0) :desc "Macro expand to replace *int* by (y (FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case 'self))))))")
(rewrite beta-substitute :on-objectives nil :path (1 0 0) :desc "Beta substitute to replace (y (FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case 'self)))))) by ((FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case 'self))))) (y (FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case 'self)))))))")
(rewrite beta-substitute-all :on-objectives nil :path nil :desc "Beta substitute all to replace (*succ* ((((FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case 'self))))) (y (FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case 'self))))))) ((*plus* (*succ* *int*)) *int*)) (FUN a *int* (*succ* *int*)))) by (*succ* (OR ((*plus* (*succ* *int*)) *int*) (*succ* *int*)))")
(rewrite split-or-all :on-objectives nil :path (1) :desc "Split OR to replace (OR ((*plus* (*succ* *int*)) *int*) (*succ* *int*)) by ((*plus* (*succ* *int*)) *int*)")
(rewrite macro-expand :on-objectives nil :path (1 0 0) :desc "Macro expand to replace *plus* by (y (FUN self (FUN a *int* (FUN b *int* *int*)) (FUN m *int* (FUN n *int* (('m 'n) (FUN a *int* (*succ* (('self 'a) 'n))))))))")
(rewrite promote :on-objectives nil :path (1 0 0 1 3 3 3 1 3 1 0 0) :desc "Promote to replace 'self by (FUN a *int* (FUN b *int* *int*))")
(rewrite beta-substitute :on-objectives nil :path (1 0 0) :desc "Beta substitute to replace (y (FUN self (FUN a *int* (FUN b *int* *int*)) (FUN m *int* (FUN n *int* (('m 'n) (FUN a *int* (*succ* (((FUN a *int* (FUN b *int* *int*)) 'a) 'n)))))))) by ((FUN self (FUN a *int* (FUN b *int* *int*)) (FUN m *int* (FUN n *int* (('m 'n) (FUN a *int* (*succ* (((FUN a *int* (FUN b *int* *int*)) 'a) 'n))))))) (y (FUN self (FUN a *int* (FUN b *int* *int*)) (FUN m *int* (FUN n *int* (('m 'n) (FUN a *int* (*succ* (((FUN a *int* (FUN b *int* *int*)) 'a) 'n)))))))))")
(rewrite beta-substitute-all :on-objectives nil :path nil :desc "Beta substitute all to replace (*succ* ((((FUN self (FUN a *int* (FUN b *int* *int*)) (FUN m *int* (FUN n *int* (('m 'n) (FUN a *int* (*succ* (((FUN a *int* (FUN b *int* *int*)) 'a) 'n))))))) (y (FUN self (FUN a *int* (FUN b *int* *int*)) (FUN m *int* (FUN n *int* (('m 'n) (FUN a *int* (*succ* (((FUN a *int* (FUN b *int* *int*)) 'a) 'n))))))))) (*succ* *int*)) *int*)) by (*succ* (((*succ* *int*) *int*) (FUN a *int* (*succ* *int*))))")
(rewrite macro-expand :on-objectives nil :path (1 0 0 0) :desc "Macro expand to replace *succ* by (FUN n *int* (FUN zero-case top (FUN succ-case (FUN n top top) ('succ-case 'n))))")
(rewrite beta-substitute-all :on-objectives nil :path nil :desc "Beta substitute all to replace (*succ* ((((FUN n *int* (FUN zero-case top (FUN succ-case (FUN n top top) ('succ-case 'n)))) *int*) *int*) (FUN a *int* (*succ* *int*)))) by (*succ* (*succ* *int*))")
(rewrite macro-expand :on-objectives t :path (1) :desc "Macro expand to replace *int* by (y (FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case 'self))))))")
(rewrite beta-substitute :on-objectives t :path (1) :desc "Beta substitute to replace (y (FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case 'self)))))) by ((FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case 'self))))) (y (FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case 'self)))))))")
(rewrite beta-substitute-all :on-objectives t :path nil :desc "Beta substitute all to replace (*succ* ((FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case 'self))))) (y (FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case 'self)))))))) by (*succ* (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case (y (FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case 'self)))))))))))")
(rewrite (objective-or-split 1) :on-objectives t :path (1 3 3) :desc "Objective OR split (1) to replace (OR 'zero-case ('succ-case (y (FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case 'self)))))))) by ('succ-case (y (FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case 'self)))))))")
(rewrite macro-expand :on-objectives nil :path (1 1) :desc "Macro expand to replace *int* by (y (FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case 'self))))))")
(rewrite macro-expand :on-objectives nil :path (1 0) :desc "Macro expand to replace *succ* by (FUN n *int* (FUN zero-case top (FUN succ-case (FUN n top top) ('succ-case 'n))))")
(rewrite beta-substitute-all :on-objectives nil :path nil :desc "Beta substitute all to replace (*succ* ((FUN n *int* (FUN zero-case top (FUN succ-case (FUN n top top) ('succ-case 'n)))) (y (FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case 'self)))))))) by (*succ* (FUN zero-case top (FUN succ-case (FUN n top top) ('succ-case (y (FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case 'self))))))))))")
(qed)
(commit)

(rewrite macro-expand :on-objectives t :path (1) :desc "Macro expand to replace *int* by (y (FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case 'self))))))")
(rewrite beta-substitute :on-objectives t :path (1) :desc "Beta substitute to replace (y (FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case 'self)))))) by ((FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case 'self))))) (y (FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case 'self)))))))")
(rewrite beta-substitute-all :on-objectives t :path nil :desc "Beta substitute all to replace (*succ* ((FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case 'self))))) (y (FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case 'self)))))))) by (*succ* (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case (y (FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case 'self)))))))))))")
(rewrite (objective-or-split 1) :on-objectives t :path (1 3 3) :desc "Objective OR split (1) to replace (OR 'zero-case ('succ-case (y (FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case 'self)))))))) by ('succ-case (y (FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case 'self)))))))")
(rewrite macro-expand :on-objectives nil :path (1 1) :desc "Macro expand to replace *int* by (y (FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case 'self))))))")
(rewrite macro-expand :on-objectives nil :path (1 0) :desc "Macro expand to replace *succ* by (FUN n *int* (FUN zero-case top (FUN succ-case (FUN n top top) ('succ-case 'n))))")
(rewrite beta-substitute-all :on-objectives nil :path nil :desc "Beta substitute all to replace (*succ* ((FUN n *int* (FUN zero-case top (FUN succ-case (FUN n top top) ('succ-case 'n)))) (y (FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case 'self)))))))) by (*succ* (FUN zero-case top (FUN succ-case (FUN n top top) ('succ-case (y (FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case 'self))))))))))")
(qed)
(commit)

