;; The proof (at each commit) will be displayed in this buffer

(start-term ((*plus* (*succ* *int*)) (*succ* *int*)))
(start-goal (*succ* *int*))

(rewrite macro-expand :on-objectives nil :path (0 0) :desc "Macro expand to replace *plus* by (y (FUN self (FUN a *int* (FUN b *int* *int*)) (FUN m *int* (FUN n *int* (('m 'n) (FUN a *int* (*succ* (('self 'a) 'n))))))))")
(rewrite macro-expand :on-objectives nil :path (0 1 0) :desc "Macro expand to replace *succ* by (FUN n *int* (FUN zero-case top (FUN succ-case (FUN n top top) ('succ-case 'n))))")
(rewrite beta-substitute :on-objectives nil :path (0 0) :desc "Beta substitute to replace (y (FUN self (FUN a *int* (FUN b *int* *int*)) (FUN m *int* (FUN n *int* (('m 'n) (FUN a *int* (*succ* (('self 'a) 'n)))))))) by ((FUN self (FUN a *int* (FUN b *int* *int*)) (FUN m *int* (FUN n *int* (('m 'n) (FUN a *int* (*succ* (('self 'a) 'n))))))) (y (FUN self (FUN a *int* (FUN b *int* *int*)) (FUN m *int* (FUN n *int* (('m 'n) (FUN a *int* (*succ* (('self 'a) 'n)))))))))")
(rewrite beta-substitute-all :on-objectives nil :path nil :desc "Beta substitute all to replace ((((FUN self (FUN a *int* (FUN b *int* *int*)) (FUN m *int* (FUN n *int* (('m 'n) (FUN a *int* (*succ* (('self 'a) 'n))))))) (y (FUN self (FUN a *int* (FUN b *int* *int*)) (FUN m *int* (FUN n *int* (('m 'n) (FUN a *int* (*succ* (('self 'a) 'n))))))))) ((FUN n *int* (FUN zero-case top (FUN succ-case (FUN n top top) ('succ-case 'n)))) *int*)) (*succ* *int*)) by (*succ* (((y (FUN self (FUN a *int* (FUN b *int* *int*)) (FUN m *int* (FUN n *int* (('m 'n) (FUN a *int* (*succ* (('self 'a) 'n)))))))) *int*) (*succ* *int*)))")
(commit)


(rewrite promote :on-objectives nil :path (1 0 0 1 3 3 3 1 3 1 0 0) :desc "Promote to replace 'self by (FUN a *int* (FUN b *int* *int*))")
(rewrite beta-substitute-all :on-objectives nil :path nil :desc "Beta substitute all to replace (*succ* (((y (FUN self (FUN a *int* (FUN b *int* *int*)) (FUN m *int* (FUN n *int* (('m 'n) (FUN a *int* (*succ* (((FUN a *int* (FUN b *int* *int*)) 'a) 'n)))))))) *int*) (*succ* *int*))) by (*succ* (((y (FUN self (FUN a *int* (FUN b *int* *int*)) (FUN m *int* (FUN n *int* (('m 'n) (FUN a *int* (*succ* *int*))))))) *int*) (*succ* *int*)))")
(rewrite beta-substitute :on-objectives nil :path (1 0 0) :desc "Beta substitute to replace (y (FUN self (FUN a *int* (FUN b *int* *int*)) (FUN m *int* (FUN n *int* (('m 'n) (FUN a *int* (*succ* *int*))))))) by ((FUN self (FUN a *int* (FUN b *int* *int*)) (FUN m *int* (FUN n *int* (('m 'n) (FUN a *int* (*succ* *int*)))))) (y (FUN self (FUN a *int* (FUN b *int* *int*)) (FUN m *int* (FUN n *int* (('m 'n) (FUN a *int* (*succ* *int*))))))))")
(rewrite beta-substitute-all :on-objectives nil :path nil :desc "Beta substitute all to replace (*succ* ((((FUN self (FUN a *int* (FUN b *int* *int*)) (FUN m *int* (FUN n *int* (('m 'n) (FUN a *int* (*succ* *int*)))))) (y (FUN self (FUN a *int* (FUN b *int* *int*)) (FUN m *int* (FUN n *int* (('m 'n) (FUN a *int* (*succ* *int*)))))))) *int*) (*succ* *int*))) by (*succ* ((*int* (*succ* *int*)) (FUN a *int* (*succ* *int*))))")
(rewrite macro-expand :on-objectives nil :path (1 0 0) :desc "Macro expand to replace *int* by (y (FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case 'self))))))")
(rewrite beta-substitute :on-objectives nil :path (1 0 0) :desc "Beta substitute to replace (y (FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case 'self)))))) by ((FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case 'self))))) (y (FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case 'self)))))))")
(rewrite beta-substitute-all :on-objectives nil :path nil :desc "Beta substitute all to replace (*succ* ((((FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case 'self))))) (y (FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case 'self))))))) (*succ* *int*)) (FUN a *int* (*succ* *int*)))) by (*succ* (OR (*succ* *int*) (*succ* *int*)))")
(rewrite macro-expand :on-objectives t :path (1) :desc "Macro expand to replace *int* by (y (FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case 'self))))))")
(rewrite beta-substitute :on-objectives t :path (1) :desc "Beta substitute to replace (y (FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case 'self)))))) by ((FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case 'self))))) (y (FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case 'self)))))))")
(rewrite beta-substitute-all :on-objectives t :path nil :desc "Beta substitute all to replace (*succ* ((FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case 'self))))) (y (FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case 'self)))))))) by (*succ* (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case (y (FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case 'self)))))))))))")
(rewrite (objective-or-split 1) :on-objectives t :path (1 3 3) :desc "Objective OR split (1) to replace (OR 'zero-case ('succ-case (y (FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case 'self)))))))) by ('succ-case (y (FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case 'self)))))))")
(rewrite macro-collapse :on-objectives t :path (1 3 3 1) :desc "Macro collapse to replace (y (FUN self top (FUN zero-case top (FUN succ-case (FUN n top top) (OR 'zero-case ('succ-case 'self)))))) by *int*")
(commit)

(rewrite split-or-all :on-objectives nil :path (1) :desc "Split OR to replace (OR (*succ* *int*) (*succ* *int*)) by (*succ* *int*)")
(rewrite macro-expand :on-objectives nil :path (1 0) :desc "Macro expand to replace *succ* by (FUN n *int* (FUN zero-case top (FUN succ-case (FUN n top top) ('succ-case 'n))))")
(rewrite beta-substitute-all :on-objectives nil :path nil :desc "Beta substitute all to replace (*succ* ((FUN n *int* (FUN zero-case top (FUN succ-case (FUN n top top) ('succ-case 'n)))) *int*)) by (*succ* (FUN zero-case top (FUN succ-case (FUN n top top) ('succ-case *int*))))")
(qed)
(commit)

(rewrite macro-expand :on-objectives nil :path (1 0) :desc "Macro expand to replace *succ* by (FUN n *int* (FUN zero-case top (FUN succ-case (FUN n top top) ('succ-case 'n))))")
(rewrite beta-substitute-all :on-objectives nil :path nil :desc "Beta substitute all to replace (*succ* ((FUN n *int* (FUN zero-case top (FUN succ-case (FUN n top top) ('succ-case 'n)))) *int*)) by (*succ* (FUN zero-case top (FUN succ-case (FUN n top top) ('succ-case *int*))))")
(qed)
(commit)

